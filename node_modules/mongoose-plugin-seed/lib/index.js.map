{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\n\r\nimport {DepGraph} from 'dependency-graph';\r\nimport mongoose from 'mongoose';\r\nimport pify from 'pify';\r\nimport Promise from 'pinkie-promise';\r\n\r\nconst models = {};\r\nconst info = {};\r\n\r\nconst seedModel = function (Model, deps) {\r\n  const modelInfo = info[Model.modelName];\r\n  const dropPromise = pify(Model.collection.drop.bind(Model.collection), Promise);\r\n  const removePromise = modelInfo.drop ? dropPromise() : Model.remove({}).exec();\r\n\r\n  return removePromise\r\n    .then(() => Model.create(modelInfo.seed(...deps)));\r\n};\r\n\r\nconst getSchemasOrder = () => {\r\n  const graph = new DepGraph();\r\n\r\n  Object.keys(models).forEach(modelName => graph.addNode(modelName));\r\n\r\n  Object.keys(models).forEach(modelName => {\r\n    info[modelName].dependencies.forEach(dep => graph.addDependency(modelName, dep));\r\n  });\r\n\r\n  return graph.overallOrder();\r\n};\r\n\r\nexport function addSeed (Model, {drop = false, seed, dependencies = []} = {}) {\r\n  if (!Model) {\r\n    throw new TypeError('mongoose-plugin-seed: Model must be provided');\r\n  }\r\n  if (!seed) {\r\n    throw new TypeError('mongoose-plugin-seed: seed function must be provided');\r\n  }\r\n  if (typeof seed !== 'function') {\r\n    throw new TypeError('mongoose-plugin-seed: seed must be a function');\r\n  }\r\n  if (!Array.isArray(dependencies)) {\r\n    throw new TypeError('mongoose-plugin-seed: dependencies must be an array');\r\n  }\r\n\r\n  models[Model.modelName] = Model;\r\n  info[Model.modelName] = {drop, dependencies: dependencies.map(model => model.modelName), seed};\r\n}\r\n\r\nexport function createSeedModel (name, Schema, opts) {\r\n  if (!name) {\r\n    throw new TypeError('mongoose-plugin-seed: name must be provided');\r\n  }\r\n  else if (typeof name !== 'string') {\r\n    throw new TypeError('mongoose-plugin-seed: name must be a string');\r\n  }\r\n  else if (!Schema) {\r\n    throw new TypeError('mongoose-plugin-seed: Schema must be provided');\r\n  }\r\n\r\n  const Model = mongoose.model(name, Schema);\r\n\r\n  addSeed(Model, opts);\r\n\r\n  return Model;\r\n}\r\n\r\nexport function seed () {\r\n  const order = getSchemasOrder();\r\n  const seeds = {};\r\n\r\n  return Promise.all(order.map(modelName => {\r\n    const Model = models[modelName];\r\n\r\n    seeds[modelName] = Promise.all(info[modelName].dependencies.map(dep => seeds[dep]))\r\n      .then(deps => seedModel(Model, deps));\r\n\r\n    return seeds[modelName];\r\n  }));\r\n}\r\n"],"sourceRoot":"/source/"}