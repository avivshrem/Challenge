'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addSeed = addSeed;
exports.createSeedModel = createSeedModel;
exports.seed = seed;

var _dependencyGraph = require('dependency-graph');

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _pinkiePromise = require('pinkie-promise');

var _pinkiePromise2 = _interopRequireDefault(_pinkiePromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var models = {};
var info = {};

var seedModel = function seedModel(Model, deps) {
  var modelInfo = info[Model.modelName];
  var dropPromise = (0, _pify2.default)(Model.collection.drop.bind(Model.collection), _pinkiePromise2.default);
  var removePromise = modelInfo.drop ? dropPromise() : Model.remove({}).exec();

  return removePromise.then(function () {
    return Model.create(modelInfo.seed.apply(modelInfo, _toConsumableArray(deps)));
  });
};

var getSchemasOrder = function getSchemasOrder() {
  var graph = new _dependencyGraph.DepGraph();

  Object.keys(models).forEach(function (modelName) {
    return graph.addNode(modelName);
  });

  Object.keys(models).forEach(function (modelName) {
    info[modelName].dependencies.forEach(function (dep) {
      return graph.addDependency(modelName, dep);
    });
  });

  return graph.overallOrder();
};

function addSeed(Model) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var _ref$drop = _ref.drop;
  var drop = _ref$drop === undefined ? false : _ref$drop;
  var seed = _ref.seed;
  var _ref$dependencies = _ref.dependencies;
  var dependencies = _ref$dependencies === undefined ? [] : _ref$dependencies;

  if (!Model) {
    throw new TypeError('mongoose-plugin-seed: Model must be provided');
  }
  if (!seed) {
    throw new TypeError('mongoose-plugin-seed: seed function must be provided');
  }
  if (typeof seed !== 'function') {
    throw new TypeError('mongoose-plugin-seed: seed must be a function');
  }
  if (!Array.isArray(dependencies)) {
    throw new TypeError('mongoose-plugin-seed: dependencies must be an array');
  }

  models[Model.modelName] = Model;
  info[Model.modelName] = { drop: drop, dependencies: dependencies.map(function (model) {
      return model.modelName;
    }), seed: seed };
}

function createSeedModel(name, Schema, opts) {
  if (!name) {
    throw new TypeError('mongoose-plugin-seed: name must be provided');
  } else if (typeof name !== 'string') {
    throw new TypeError('mongoose-plugin-seed: name must be a string');
  } else if (!Schema) {
    throw new TypeError('mongoose-plugin-seed: Schema must be provided');
  }

  var Model = _mongoose2.default.model(name, Schema);

  addSeed(Model, opts);

  return Model;
}

function seed() {
  var order = getSchemasOrder();
  var seeds = {};

  return _pinkiePromise2.default.all(order.map(function (modelName) {
    var Model = models[modelName];

    seeds[modelName] = _pinkiePromise2.default.all(info[modelName].dependencies.map(function (dep) {
      return seeds[dep];
    })).then(function (deps) {
      return seedModel(Model, deps);
    });

    return seeds[modelName];
  }));
}
//# sourceMappingURL=index.js.map
